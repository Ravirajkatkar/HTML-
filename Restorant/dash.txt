import React, {useEffect, useState} from 'react';
import {
  StyleSheet,
  Text,
  View,
  TouchableWithoutFeedback,
  Keyboard,
  StatusBar,
  Dimensions,
  ScrollView,
  TouchableOpacity,
} from 'react-native';
import {Button, Box, Select, CheckIcon} from 'native-base';

import codePush from 'react-native-code-push';
import {useDispatch, useSelector} from 'react-redux';
import {RootState} from '../../../Store/store';
import {AboutAction} from '../../../Store/Slice/Customer/About';
import {DeviceTypeAction} from '../../../Store/Slice/Customer/Dashboard/DeviceType';
import {MoneyReceivedAction} from '../../../Store/Slice/Customer/Dashboard/MoneyReceived';
import {DeviceModeAction} from '../../../Store/Slice/Customer/Dashboard/DeviceMode';
import {AssignedDevice} from '../../../Store/Slice/Customer/Dashboard/AssignedDevice';
import {deviceTypeListAction} from '../../../Store/Slice/Customer/Dashboard/DeviceList';
import Icon from 'react-native-vector-icons/SimpleLineIcons';
import Icon1 from 'react-native-vector-icons/MaterialCommunityIcons';
import Icon2 from 'react-native-vector-icons/Zocial';
import ICon3 from 'react-native-vector-icons/Entypo';
import LayoutConstant from '../LayoutConstant';
// import LinearGradient from 'react-native-linear-gradient';

import {
  VictoryBar,
  VictoryChart,
  VictoryTheme,
  VictoryGroup,
  VictoryPie,
  VictoryLabel,
  VictoryLine,
  VictoryAxis,
  VictoryLegend,
  VictoryStack,
} from 'victory-native';
import ConstHeader from '../ConstHeader';
export const orangyellow = [
  'rgba(251, 140, 0, 0.6)',
  'rgba(255, 235, 59, 0.6)',
];
export const white = ['white', 'white', 'white'];
import {AdddressAction} from '../../../Store/Slice/Customer/Support_Address';
import {useNavigation} from '@react-navigation/native';
import {NavigationStackProp} from 'react-navigation-stack';
import {StackRouteParam} from '../../navigation/StackRoute';
import {
  BirthDateInput,
  CalDeviceType1,
  CalDeviceType2,
  CalDeviceType3,
  SearchDate,
  // RadioButtonInput,
} from '../Profile/InputBox';
import DashboardDatePicker from '../../../../library/components/molecules/Date_Time/DashboardDatendTime';
import {KCards} from '../../../../library/components/atoms/KCards';
import Pie from 'react-native-pie';
import moment from 'moment';
import {string} from 'prop-types';
import {TouchableHighlight} from 'react-native-gesture-handler';

export default function Dashboard() {
  const navigation =
    useNavigation<NavigationStackProp<StackRouteParam, 'StackRoute'>>();
  const dispatch = useDispatch();
  let codePushOptions = {checkFrequency: codePush.CheckFrequency.MANUAL};
  const userType = useSelector((state: RootState) => state.Session.LoginType);
  const loggedInUserId = useSelector(
    (state: RootState) => state.Session.LoginUserId,
  );

  const DeviceType = useSelector(
    (state: RootState) => state.DeviceType.deviceList,
  );
  const MoneyReceived = useSelector(
    (state: RootState) => state.MoneyReceived.list,
  );
  const DeviceMode1 = useSelector(
    (state: RootState) => state.DeviceMode.DeviceMode,
  );

  const AssignedDevices = useSelector(
    (state: RootState) => state.AssignedDevice.DeviceMode,
  );
  const deviceLists = useSelector(
    (state: RootState) => state.DeviceList.deviceTypeList,
  );

  const [SelectMode, setSelectMode] = useState(null);
  const [durationType, setDurationType] = useState<number>(1);
  const [contentType, setContentType] = useState<number>(1);

  const [Alldate, setAlldate] = useState('0001-01-01T00:00:00');

  const [Date1, setDate1] = useState('01-01-0001');
  const [Date2, setDate2] = useState('01-01-0001');

  const [CalenderMode1, setCalenderMode1] = useState('01-01-0001');
  const [CalenderMode2, setCalenderMode2] = useState('01-01-0001');

  const [CalenderTimeline, setCalenderTimeline] = useState('01-01-0001');

  const [PieHidden0, setPieHidden0] = useState(true);
  const [PieHidden1, setPieHidden1] = useState(true);
  const [PieHidden2, setPieHidden2] = useState(true);
  const [PieHidden3, setPieHidden3] = useState(true);

  const [BarHiddenA, setBarHiddenA] = useState<boolean>(true);
  const [BarHiddenR, setBarHiddenR] = useState(true);
  const [BarHiddenF, setBarHiddenF] = useState(true);

  const [Hidden, setHidden] = useState(true);

  const [ErrorDate, setErrorDate] = useState('');

  const FromDateformat = moment(Date1).format('MM/DD/YYYY');
  const ToDateformat = moment(Date2).format('MM/DD/YYYY');

  const FromDateformat2 = moment(CalenderMode1).format('MM/DD/YYYY');
  const ToDateformat2 = moment(CalenderMode2).format('MM/DD/YYYY');

  const Timelinedateformat = moment(CalenderTimeline).format('MM/DD/YYYY');

  const body1 = {
    token: 'S1BBWU1PQklMRUFQUElOVEVHUkFUSU9O',
    users: loggedInUserId,
    currency: '1',
    fromDate: FromDateformat,
    toDate: ToDateformat,
    loggedInUserId: loggedInUserId,
    userType: userType,
  };
  const body3 = {
    token: 'S1BBWU1PQklMRUFQUElOVEVHUkFUSU9O',
    loggedInUserId: loggedInUserId,
    userType: '3',
    users: loggedInUserId,
    currency: '1',
    fromDate: FromDateformat2,
    toDate: ToDateformat2,
    deviceTypeName: SelectMode,
  };
  const body4 = {
    token: 'S1BBWU1PQklMRUFQUElOVEVHUkFUSU9O',
    contentType: contentType,
    userTypeId: userType,
    loggedInUserId: loggedInUserId,
    durationType: durationType,
    fromDate: Timelinedateformat,
    deviceType: SelectMode,
    users: '6784',
    currency: 1,
  };

  function validDate(Value: any) {
    setDate2(Value);
    if (Date1 === '01-01-0001') {
      setErrorDate('Error');
    } else {
      setErrorDate('');
      dispatch(DeviceTypeAction(body1));
    }
  }
  function DeviceModefun(Value: any) {
    setCalenderMode2(Value);
    if (CalenderMode1 === '01-01-0001') {
      setErrorDate('Error');
    } else {
      setErrorDate('');
      dispatch(DeviceModeAction(body3));
    }
  }

  function TimelinegraphFun(itemValue: any) {
    setSelectMode(itemValue);
    dispatch(AssignedDevice(body4));
  }
  const getData = async => {
    // await AsyncStorage.setItem('BottomPage', 'Profile')
    // const token = await AsyncStorage.getItem('token')
    // const isLoggedIn = await AsyncStorage.getItem('isLoggedIn')
    // setisLoggedIn(isLoggedIn)
    // console.log(isLoggedIn)
    dispatch(DeviceTypeAction(body1));
    dispatch(DeviceModeAction(body3));
    dispatch(AssignedDevice(body4));

    const body2 = {
      dashboardSetupModel: null,
      ListDashboardSetupModel: null,
      registerMember: null,
      electricalAppliances: null,
      city: null,
      FromDate: '0001-01-01T00:00:00',
      ToDate: '0001-01-01T00:00:00',
      DeviceTypeName: null,
      UserType: userType,
      Users: loggedInUserId,
      Currency: 1,
      Id: 0,
      IsDeleted: false,
      UpdatedBy: 2425,
      CreatedBy: 2425,
      UpdatedDate: Alldate,
      CreatedDate: Alldate,
      LoginUserId: loggedInUserId,
      token: 'S1BBWU1PQklMRUFQUElOVEVHUkFUSU9O',
      loggedInUserId: loggedInUserId,
      stateIds: '',
    };

    const ListsBody = {
      token: 'S1BBWU1PQklMRUFQUElOVEVHUkFUSU9O',
      loggedInUserType: userType,
      loggedInUserId: loggedInUserId,
      deviceId: 0,
    };

    dispatch(MoneyReceivedAction(body2));
    dispatch(deviceTypeListAction(ListsBody));
    // console.log('body', body3);
    if (loggedInUserId !== '') {
      // console.log('Yogi');
      dispatch(AboutAction(loggedInUserId));
    }
  };

  useEffect(() => {
    getData();
  }, [loggedInUserId]);

  const CategoryData = MoneyReceived.map((i: any) => i.Category);
  const ValueData = MoneyReceived.map((i: any) => i.Value);
  const ColorData = MoneyReceived.map((i: any) => i.Color);
  console.log('color', ColorData);

  const NameData = DeviceType.map((i: any) => i.Name);

  const Data = [
    {x: PieHidden0 && CategoryData[0], y: PieHidden0 && ValueData[0]},
    {x: PieHidden1 && CategoryData[1], y: PieHidden1 && ValueData[1]},
    {x: PieHidden2 && CategoryData[2], y: PieHidden2 && ValueData[2]},
    {x: PieHidden3 && CategoryData[3], y: PieHidden3 && ValueData[3]},
  ];

  const [isSelect, setIsSelect] = useState(true);
  const [color, setColor] = useState('#ebebeb');
  let ChangeBackGround = () => {
    isSelect === true ? null : ;
    // let colour = '#3F51B5';
    // setColor(colour);
  };

  return (
    <LayoutConstant isHome={true} search={false}>
      <ConstHeader title="Dashboard" />
      <ScrollView>
        <View style={style.detailsContainer}>
          {/* Summary of Device Type chart  */}
          <KCards
            elevated={true}
            style={{
              backgroundColor: '#fff',
              marginHorizontal: 21,
              marginBottom: 20,
              borderRadius: 10,
            }}>
            <View>
              <Text style={style.titleText}>Summary of Device Type</Text>
              <View style={{flex: 1, flexDirection: 'row', marginLeft: 10}}>
                <View style={{flex: 0.5}}>
                  <CalDeviceType1
                    errors={''}
                    label="Date of Birth"
                    placeholdername="DateofBirth"
                    inputvalue="date"
                    onChangeText={(Value: any) => setDate1(Value)}
                    onChangevalue="AmountBorrowed"
                    maxLength={50}></CalDeviceType1>
                </View>
                <View style={{flex: 0.5}}>
                  <CalDeviceType2
                    errors={ErrorDate}
                    label="Date of Birth"
                    placeholdername="DateofBirth"
                    inputvalue={Date1}
                    onChangeText={(Value: any) => validDate(Value)}
                    onChangevalue="AmountBorrowed"
                    maxLength={50}
                    minimumDate={Date1}></CalDeviceType2>
                </View>
              </View>
              <Box alignItems="center">
                <View style={{flexDirection: 'row', marginTop: 10}}>
                  <Button
                    size={'xs'}
                    style={[style.buttonBB, {backgroundColor: '#ebebeb'}]}
                    onPress={() => setBarHiddenA(!BarHiddenA)}>
                    <Text
                      style={{
                        color: '#3F51B5',
                        fontWeight: 'bold',
                        fontSize: 12,
                      }}>
                      Assigned
                    </Text>
                  </Button>
                  <Button
                    size={'xs'}
                    style={[
                      style.buttonBB,
                      {backgroundColor: '#ebebeb', marginHorizontal: 20},
                    ]}
                    onPress={() => setBarHiddenR(!BarHiddenR)}>
                    <Text
                      style={{
                        color: '#99d101',
                        fontWeight: 'bold',
                        fontSize: 12,
                      }}>
                      Recharged
                    </Text>
                  </Button>
                  <Button
                    size={'xs'}
                    style={[style.buttonBB, {backgroundColor: '#ebebeb'}]}
                    onPress={() => setBarHiddenF(!BarHiddenF)}>
                    <Text
                      style={{
                        color: '#f05662',
                        fontWeight: 'bold',
                        fontSize: 12,
                      }}>
                      Freed
                    </Text>
                  </Button>
                </View>
              </Box>
              <ScrollView horizontal={true}>
                <VictoryChart>
                  <VictoryGroup offset={15}>
                    {DeviceType.map((i: any) => {
                      return (
                        <VictoryBar
                          colorScale={['#3F51B5', '#99d101', '#f05662']}
                          key={i}
                          labels={[
                            BarHiddenA && i.Assigned,
                            BarHiddenR && i.Recharged,
                            BarHiddenF && i.Freed,
                          ]}
                          data={[
                            {x: i.Name, y: BarHiddenA && i.Assigned},
                            {y: BarHiddenR && i.Recharged},
                            {y: BarHiddenF && i.Freed},
                          ]}
                        />
                      );
                    })}

                    {/* {DeviceType.map((i: any) => {
                    return (
                      <>
                        <VictoryBar
                          colorScale={['#3F51B5']}
                          labels={i.Assigned}
                          categories={{x: [i.Name]}}
                          data={[{y: i.Assigned}]}
                        />

                        <VictoryBar
                          colorScale={['#99d101']}
                          data={[{y: i.Recharged}]}
                        />

                        <VictoryBar
                          colorScale={['#f05662']}
                          data={[{y: i.Freed}]}
                        />
                      </>
                    );
                  })} */}
                  </VictoryGroup>
                </VictoryChart>
              </ScrollView>
            </View>
          </KCards>
          {/* Money Received Through Different Channels Chart  */}
          <KCards
            elevated={true}
            style={{
              backgroundColor: '#fff',
              marginHorizontal: 21,
              marginBottom: 20,
              borderRadius: 10,
            }}>
            <View>
              <Text style={style.titleText}>
                Money Received Through Different Channels
              </Text>

              {/* <Box alignItems="center"> */}
              <View
                style={{
                  flexDirection: 'column',
                  marginStart: 85,
                  // marginTop: 10,
                  // marginBottom: 10,
                }}>
                {/* <Button
                    size={'xs'}
                    style={{
                      backgroundColor: ColorData[0],
                      // backgroundColor: '#ebebeb',
                      marginHorizontal: 5,
                    }}
                    onPress={() => setPieHidden0(!PieHidden0)}>
                    <Text style={{color: 'black', fontSize: 12}}>
                      {CategoryData[0]}
                    </Text>
                  </Button> */}
                <TouchableOpacity
                  // style={style.PGbutton}
                  style={{
                    flex: 1,
                    flexDirection: 'row',
                    marginTop: 10,
                    marginBottom: 10,
                  }}
                  onPress={() => setPieHidden0(!PieHidden0)}>
                  <Button
                    size={'xs'}
                    style={[
                      style.size,
                      {backgroundColor: ColorData[0]},
                      // backgroundColor: '#ebebeb',
                    ]}></Button>
                  <Text style={{color: 'black', fontSize: 12}}>
                    {CategoryData[0]}
                  </Text>
                </TouchableOpacity>

                {/* <Button
                    size={'xs'}
                    style={{
                      backgroundColor: ColorData[1],
                      // backgroundColor: '#ebebeb',
                      marginHorizontal: 5,
                    }}
                    onPress={() => setPieHidden1(!PieHidden1)}>
                    <Text style={{color: 'black', fontSize: 12}}>
                      {CategoryData[1]}
                    </Text>
                  </Button> */}
                <TouchableOpacity
                  // style={style.PGbutton}
                  style={{
                    flex: 1,
                    flexDirection: 'row',
                    marginTop: 10,
                    marginBottom: 10,
                  }}
                  onPress={() => setPieHidden1(!PieHidden1)}>
                  <Button
                    size={'xs'}
                    style={[
                      style.size,
                      {backgroundColor: ColorData[1]},
                      // backgroundColor: '#ebebeb',
                    ]}></Button>
                  <Text style={{color: 'black', fontSize: 12}}>
                    {CategoryData[1]}
                  </Text>
                </TouchableOpacity>
                {/* </View>
                <View
                  style={{
                    flexDirection: 'row',
                    marginTop: 10,
                    marginBottom: 10,
                  }}> */}
                {/* <Button
                  size={'xs'}
                  style={{
                    backgroundColor: ColorData[2],
                    // backgroundColor: '#ebebeb',
                    marginHorizontal: 5,
                    marginBottom: 10,
                  }}
                  onPress={() => setPieHidden2(!PieHidden2)}>
                  <Text style={{color: 'black', fontSize: 12}}>
                    {CategoryData[2]}
                  </Text>
                 </Button> */}
                <TouchableOpacity
                  // style={style.PGbutton}
                  style={{
                    flex: 1,
                    flexDirection: 'row',
                    marginTop: 10,
                    marginBottom: 10,
                  }}
                  onPress={() => setPieHidden2(!PieHidden2)}>
                  <Button
                    size={'xs'}
                    style={[
                      style.size,
                      {backgroundColor: ColorData[2]},
                      // backgroundColor: '#ebebeb',
                    ]}></Button>
                  <Text style={{color: 'black', fontSize: 12}}>
                    {CategoryData[2]}
                  </Text>
                </TouchableOpacity>
                {/* <Button
                  size={'xs'}
                  style={{
                    backgroundColor: ColorData[3],
                    // backgroundColor: '#ebebeb',
                    marginHorizontal: 5,
                  }}
                  onPress={() => setPieHidden3(!PieHidden3)}>
                  <Text style={{color: 'black', fontSize: 12}}>
                    {CategoryData[3]}
                  </Text>
                 </Button> */}
                <TouchableOpacity
                  style={{
                    flex: 1,
                    flexDirection: 'row',
                    marginTop: 10,
                    marginBottom: 15,
                  }}
                  onPress={() => setPieHidden3(!PieHidden3)}>
                  <Button
                    size={'xs'}
                    style={[
                      style.size,
                      {backgroundColor: ColorData[3]},
                      // backgroundColor: '#ebebeb',
                    ]}></Button>
                  <Text style={{color: 'black', fontSize: 12}}>
                    {CategoryData[3]}
                  </Text>
                </TouchableOpacity>
              </View>
              {/* </Box> */}
              <View
                style={{
                  flex: 1,
                  // backgroundColor: 'red',
                  marginBottom: -60,
                  marginTop: -90,
                }}>
                <VictoryPie
                  colorScale={[
                    ColorData[0],
                    ColorData[1],
                    ColorData[2],
                    ColorData[3],
                  ]}
                  data={Data}
                  width={290}
                  style={{
                    labels: {fill: 'white'},
                  }}
                />
              </View>
            </View>
          </KCards>
          {/* Device mode count device wise  */}
          <KCards
            elevated={true}
            style={{
              backgroundColor: '#fff',
              marginHorizontal: 21,
              marginBottom: 20,
              borderRadius: 10,
            }}>
            <View>
              <Text style={style.titleText}>Device mode wise device count</Text>
              <View style={{flex: 1, flexDirection: 'row', marginLeft: 10}}>
                <View style={{flex: 0.5}}>
                  <CalDeviceType1
                    errors={''}
                    label="Date of Birth"
                    placeholdername="DateofBirth"
                    inputvalue="date"
                    onChangeText={(Value: any) => setCalenderMode1(Value)}
                    onChangevalue="AmountBorrowed"
                    maxLength={50}></CalDeviceType1>
                </View>
                <View style={{flex: 0.5}}>
                  <CalDeviceType2
                    errors={''}
                    label="Date of Birth"
                    placeholdername="DateofBirth"
                    inputvalue={CalenderMode1}
                    onChangeText={(Value: any) => DeviceModefun(Value)}
                    onChangevalue="AmountBorrowed"
                    maxLength={50}
                    minimumDate={CalenderMode1}></CalDeviceType2>
                </View>
              </View>
              <View style={{alignSelf: 'center', paddingTop: 10}}>
                <Box w="3/4" maxW="300">
                  <Select
                    selectedValue={SelectMode}
                    minWidth="90"
                    mx={4}
                    accessibilityLabel={'All'}
                    placeholder={'All'}
                    _selectedItem={{
                      bg: 'teal.600',
                      endIcon: <CheckIcon size="5" />,
                    }}
                    mt={1}
                    onValueChange={itemValue => setSelectMode(itemValue)}>
                    <Select.Item label="All" value={null} />
                    {deviceLists.map((i: any) => {
                      return <Select.Item label={i.Text} value={i.Value} />;
                    })}
                  </Select>
                </Box>
              </View>

              <VictoryChart
                animate={{
                  duration: 1000,
                  onLoad: {duration: 1000},
                }}>
                <VictoryAxis
                  dependentAxis={true}
                  style={{
                    axis: {
                      stroke: 'black', //CHANGE COLOR OF X-AXIS
                    },
                    tickLabels: {
                      fill: 'black', //CHANGE COLOR OF X-AXIS LABELS
                    },
                  }}
                />
                {/* <VictoryAxis
                  dependentAxis={false}
                  style={{
                    tickLabels: {
                      fill: 'black', //CHANGE COLOR OF X-AXIS LABELS
                    },
                  }}
                /> */}
                {DeviceMode1.length != 0 ? (
                  <VictoryAxis
                    dependentAxis={false}
                    style={{
                      tickLabels: {
                        fill: 'black', //CHANGE COLOR OF X-AXIS LABELS
                      },
                    }}
                  />
                ) : (
                  <VictoryAxis
                    dependentAxis={false}
                    style={{
                      tickLabels: {
                        display: 'none', //CHANGE COLOR OF X-AXIS LABELS
                      },
                    }}
                  />
                )}

                <VictoryGroup offset={15}>
                  {DeviceMode1.map((i: any) => {
                    return (
                      <VictoryBar
                        colorScale={[i.Color]}
                        key={i}
                        labels={[i.Assigned]}
                        data={[{x: i.DeviceMode, y: i.Assigned}]}
                      />
                    );
                  })}
                </VictoryGroup>
              </VictoryChart>
            </View>
          </KCards>
          {/*timeline*/}
          <KCards
            elevated={true}
            style={{
              backgroundColor: '#fff',
              marginHorizontal: 21,
              marginBottom: -10,
              borderRadius: 10,
            }}>
            <View>
              <Text style={style.titleText}>Timeline of Assigned Devices</Text>
              <View
                style={{
                  flex: 1,
                  flexDirection: 'row',
                  marginStart: 10,
                }}>
                <View
                  style={{
                    flex: 1,
                    flexDirection: 'row',
                    paddingTop: 10,
                  }}>
                  <Button
                    style={[
                      style.button,
                      // {backgroundColor: color}
                    ]}
                    onPress={() => {
                      ChangeBackGround();
                      TimelinegraphFun('');
                      setDurationType(1);
                    }}>
                    <Text style={{color: 'black', fontSize: 11}}>1Y</Text>
                  </Button>
                  <Button
                    style={[style.button,{}]}
                    onPress={() => {
                      TimelinegraphFun('');
                      setDurationType(2);
                    }}>
                    <Text style={{color: 'black', fontSize: 11}}>1M</Text>
                  </Button>
                  <Button
                    style={style.button}
                    onPress={() => {
                      setDurationType(3);
                      TimelinegraphFun('');
                    }}>
                    <Text style={{color: 'black', fontSize: 11}}>1W</Text>
                  </Button>
                </View>
                <View
                  style={{
                    flex: 2.5,
                    // flexDirection: 'row',
                    marginLeft: 35,
                    marginStart: 70,
                    paddingRight: -20,
                    // justifyContent: 'space-between',
                  }}>
                  <CalDeviceType3
                    inputvalue={CalenderTimeline}
                    onChangeText={(Value: any) => {
                      setCalenderTimeline(Value);

                      TimelinegraphFun(Value);
                    }}
                    // value={TransSearch}
                    Data={''}></CalDeviceType3>
                </View>
              </View>

              <View style={{flex: 1, flexDirection: 'row'}}>
                <View style={{flexDirection: 'column', marginStart: 10}}>
                  <View style={{flexDirection: 'row'}}>
                    <TouchableHighlight
                      activeOpacity={0.6}
                      underlayColor="#808080"
                      onPress={() => <Button />}>
                      <Button
                        style={{backgroundColor: '#ebebeb', margin: 3}}
                        onPress={() => {
                          TimelinegraphFun('');
                          setContentType(1);
                        }}>
                        <Text style={{color: 'black'}}>Assigned</Text>
                      </Button>
                    </TouchableHighlight>
                    <TouchableHighlight
                      activeOpacity={0.6}
                      underlayColor="#808080"
                      onPress={() => <Button />}>
                      <Button
                        style={{backgroundColor: '#ebebeb', margin: 3}}
                        onPress={() => {
                          TimelinegraphFun('');
                          setContentType(2);
                        }}>
                        <Text style={{color: 'black'}}>Recharges</Text>
                      </Button>
                    </TouchableHighlight>
                  </View>
                  <View>
                    <TouchableHighlight
                      activeOpacity={20}
                      underlayColor="#808080"
                      onPress={() => <Button />}>
                      <Button
                        style={{backgroundColor: '#ebebeb', margin: 3}}
                        onPress={() => {
                          TimelinegraphFun('');
                          setContentType(3);
                        }}>
                        <Text style={{color: 'black'}}>Recharge Amount</Text>
                      </Button>
                    </TouchableHighlight>
                  </View>
                </View>
                <View style={{marginEnd: 25}}>
                  <Box w="3/4" maxW="135">
                    <Select
                      selectedValue={SelectMode}
                      minWidth="90"
                      mx={4}
                      accessibilityLabel={'All'}
                      placeholder={'All'}
                      _selectedItem={{
                        bg: 'teal.600',
                        endIcon: <CheckIcon size="5" />,
                      }}
                      mt={1}
                      onValueChange={(itemValue: any) => {
                        TimelinegraphFun(itemValue);
                      }}>
                      <Select.Item label="All" value={null} />
                      {deviceLists.map((i: any) => {
                        return <Select.Item label={i.Text} value={i.Value} />;
                      })}
                    </Select>
                  </Box>
                </View>
              </View>
              <View style={{marginBottom: 10}}>
                <ScrollView horizontal={true}>
                  <VictoryChart
                    theme={VictoryTheme.material}
                    domainPadding={{x: 20}}>
                    {AssignedDevices.map((i: any) => {
                      return (
                        <VictoryBar
                          barRatio={0.3}
                          style={{
                            data: {fill: '#c43a31'},
                          }}
                          key={i}
                          labels={i.Value}
                          data={[{x: i.XAxisValue, y: i.Value}]}
                        />
                      );
                    })}
                    <VictoryAxis dependentAxis />
                    <VictoryAxis
                      tickLabelComponent={
                        <VictoryLabel
                          style={{padding: -20, fontSize: 8}}
                          angle={-90}
                          y={326}
                        />
                      }
                    />
                  </VictoryChart>
                </ScrollView>
                {/* <View>
                  <ScrollView horizontal={true}>
                    <VictoryChart theme={VictoryTheme.material}>
                      {AssignedDevices.map((i: any) => {
                        return (
                          <VictoryLine
                            style={{
                              data: {stroke: '#c43a31'},
                              parent: {border: '1px solid #ccc'},
                            }}
                            key={i}
                            data={[{x: i.XAxisValue, y: i.Value}]}
                          />
                        );
                      })}
                      <VictoryAxis dependentAxis />
                      <VictoryAxis
                        tickLabelComponent={
                          <VictoryLabel
                            style={{padding: -20, fontSize: 8}}
                            angle={-90}
                            y={326}
                          />
                        }
                      />
                    </VictoryChart>
                  </ScrollView>
                </View> */}
              </View>
            </View>
          </KCards>
        </View>
      </ScrollView>
    </LayoutConstant>
  );
}

export function Contain({children, title, value, styles}: any) {
  return (
    <>
      <View
        style={{
          flexDirection: 'row',
          alignItems: 'center',
          borderBottomStartRadius: 5,
          borderBottomEndRadius: 5,
          borderColor: '#EBE7E6',
          borderBottomWidth: 2,
        }}>
        <View style={{...style.main}}>
          <View
            style={{
              ...style.icons,
              ...styles,
              alignSelf: 'center',
            }}>
            {/* <View style={{ flexDirection: "row", }}>  */}
            {children}
          </View>
          <View
            style={{
              ...style.item,
              alignSelf: 'center',
            }}>
            <Text
              style={{
                ...style.cardItems,
                fontSize: 15,
              }}>
              {title}
            </Text>
          </View>
          <View style={{justifyContent: 'center'}}>
            <Text>:</Text>
          </View>
          <View style={{...style.item1}}>
            <View style={{flexDirection: 'column'}}>
              <Text
                style={{
                  color: 'black',
                  fontSize: 15,
                }}>
                {value}
              </Text>
            </View>
          </View>
        </View>
      </View>
    </>
  );
}
let style = StyleSheet.create({
  icons: {
    flex: 1,
    width: 120, //using fixed item width instead of flex: 0.5 works
    marginHorizontal: 5,
    flexGrow: 0.3,
    flexShrink: 0,
  },
  item: {
    flex: 1,
    width: 120, //using fixed item width instead of flex: 0.5 works
    marginHorizontal: 5,
    flexGrow: 1.7,
    flexShrink: 0,
    // padding: 10,
  },
  main: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'center',
    alignContent: 'center',
    alignItems: 'center',
    marginBottom: 8,
    marginTop: 8,
  },
  cardItems: {
    color: '#FF7F50',
    fontSize: 15,
    fontWeight: 'bold',

    // textShadowColor: 'black',
    // textShadowOffset: { width: -1, height: 0 },
    // textShadowRadius: perfectSize(10),
    fontFamily: 'Rowdies-Regular',
  },
  item1: {
    flex: 1,
    width: 150, //using fixed item width instead of flex: 0.5 works
    marginHorizontal: 5,
    flexGrow: 2,
    flexShrink: 0,
    // padding: 10,
    alignSelf: 'center',
  },

  detailsContainer: {
    flex: 1,
    marginTop: 20,
    paddingBottom: 60,
  },

  Box: {
    height: 'auto',
    backgroundColor: 'white',
    borderRadius: 10,
    paddingHorizontal: 30,
    marginVertical: 0,
    paddingVertical: 30,
    marginHorizontal: 15,
    justifyContent: 'center',
  },
  HeaderLabel: {
    color: '#737373',
    textAlign: 'center',
    fontSize: 25,
    fontWeight: 'bold',

    marginBottom: 20,
  },
  headDetails: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 16,
    paddingLeft: 10,
  },
  Aboutdata: {
    marginTop: 20,
  },
  PGbutton: {
    flex: 1,
    flexDirection: 'row',
    marginTop: 10,
    marginBottom: 15,
    backgroundColor: '#ebebeb',
    height: 33,
    width: '60%',
    borderRadius: 5,
    alignItems: 'center',
    justifyContent: 'center',
  },

  Details: {
    flexDirection: 'column',
  },

  container: {
    flex: 1,
  },
  titleText: {
    flex: 1,
    color: 'black',
    fontSize: 15,
    marginTop: 15,
    marginBottom: 15,
    fontWeight: 'bold',
    textAlign: 'center',
  },

  headerText: {
    fontSize: 16,
    fontWeight: '500',
    color: 'black',
  },

  button: {
    height: 40,
    width: 45,
    color: 'red',
    borderColor: 'black',
    // backgroundColor: '#ebebeb',
    margin: 3,
  },
  buttonBB: {
    height: 33,
    width: 70,
  },
  size: {
    height: 3,
    width: 5,
    marginRight: 5,
  },

  footer: {
    // flex: 1,
    // display: 'flex',
    height: 'auto',
    backgroundColor: 'white',

    marginHorizontal: 10,
    paddingLeft: 10,
    alignContent: 'center',
    // flexDirection: 'column',
    justifyContent: 'center',

    // paddingTop: 10,
    paddingBottom: 20,
    borderBottomRightRadius: 10,
    borderBottomLeftRadius: 10,
    borderTopRightRadius: 10,
    borderTopLeftRadius: 10,
  },
  MainContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
});
